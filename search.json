[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AGDS 2: Digital Soil Mapping",
    "section": "",
    "text": "Preface\nThis online book covers the tutorial on digital soil mapping from the course Applied Geodata Science 2 at the University of Bern. Code and data was provided by Madlene Nussbaum and the conversion into an online tutorial was done by Pascal Schneider.\n\n\nSystem Setup\nIf you want to replicate the code of this tutorial, we suggest to either load the latest renv.lock file from this tutorial’s repository and load it using the {renv} package. Alternatively, the output below could be used to traceback and install the exact package versions that were used in this tutorial.\n\n\nCode\nsessionInfo()\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 rmarkdown_2.23   \n [9] knitr_1.43        jsonlite_1.8.7    xfun_0.39         digest_0.6.33    \n[13] rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "01-introduction.html#a-primer-on-spatial-data-science",
    "href": "01-introduction.html#a-primer-on-spatial-data-science",
    "title": "1  Introduction",
    "section": "1.1 A primer on spatial data science",
    "text": "1.1 A primer on spatial data science\nSpatial data science combines geography, statistics, computer science, and data science to analyze and interpret spatially referenced data. It focuses on uncovering patterns and relationships in geospatial data to gain insights into spatial phenomena. By integrating locational information, spatial data science provides a deeper understanding of complex spatial patterns and processes. There are three key aspects of spatial data science that allow such a deeper understanding:\n\nSpatial Data Visualization: Visualizing spatial data through maps and interactive visualizations helps communicate complex spatial information effectively.\nSpatial Data Analysis: Techniques such as spatial clustering, spatial autocorrelation analysis, and spatial regression reveal spatial patterns, trends, and dependencies.\nGeospatial Machine Learning: Applying machine learning algorithms to spatial data enables the creation of predictive models for spatially explicit predictions.\n\nCombined, working on each of these aspects, allows for a variety of real-world applications. For example, in urban planning, ecology, transportation, public health, and social sciences, we can apply similar methods to solve a problem. The knowledge inferred from maps, statistical analysis, and model prediction reveals fundamental processes to understand spatial relationships, and to eventually improve decision-making."
  },
  {
    "objectID": "01-introduction.html#a-primer-on-soil-science",
    "href": "01-introduction.html#a-primer-on-soil-science",
    "title": "1  Introduction",
    "section": "1.2 A primer on soil science",
    "text": "1.2 A primer on soil science\nGenerally, any soil is the result of five key pedogenetic factors (Jenny, 1994). Abbreviated, they can be simply memorized with the mnemonic “CLORPT”: soil = f(CLimate, Organisms, topogRaphy, Parent material, Time, … ). The “…” stands for additional factors, which have been recognized to be important factors but do not fall under the original CLORPT scheme. soil itself can stand for a variety of soil properties like its texture, density, pH, water drainage, cation exchange capacity, organic matter content, etc.\nDue to intensification of land use through agriculture and urbanization, soils across the world are increasingly under threat. Yet, soils provide crucial ecosystem services to us such as supporting our food system, draining water during heavy rainfalls, and storing massive amounts of carbon (see Figure 1.1). To quantify such services and to assess the risks associated with loosing soils, good maps are needed that provide information on where what soil service is delivered. Creating such maps through exhaustive sampling campaigns is however very costly, time-intensive and often at coarse temporal and spatial resolution. Also, such sampling campaigns provide only a snapshot of the historic and current state - they obviously cannot tell us anything about the soil’s future. So, there is a strong demand for models that provide us with information on a soil’s future across large spatial scales.\n\n\n\n\n\nFigure 1.1: Soil functions as defined per FAO, Figure taken from Baveye et al. (2020).\n\n\n\n\nLuckily, information on the CLORPT variables is often available at large continuous scale, for example, spatial data products for climate data, digital elevation models, and geological maps. This information is highly useful to create models that can predict key soil properties and services across the same area for which we have data. So, if we can produce a robust model, we can massively simplify sampling efforts, remove the need for hand-drawn maps, and inform decision-making processes in a cost- and labor-effective manner.\nThe increase in data abundance and computational resources, and advances in statistics have put forward such statistical models. Especially, the use of Random Forests has gained a lot of traction due being relatively simple whilst highly flexible (Hengl et al., 2018). Therefore, they are a perfect match for creating digital maps of all sorts of soil properties in a quick and simple manner.\nHowever, note that the variety in pedogenetic factors and soil properties comes with an equal variety of data types with variables being numerical (capped like % of clay content, or un-capped like organic matter content), binary (e.g., presence of water at 0-10 cm soil depth), categorical (more than two without an order), ordinal (more than two with an order), or interval (cutting numerical values into intervals). Moreover, this data can come in different data formats. Due to this abundance of data formats and their peculiarities, it is of great importance to properly understand your data. Only when you know your data well, you can pick a suitable statistical model to address your research question."
  },
  {
    "objectID": "01-introduction.html#case-study-digital-soil-mapping-with-random-forests",
    "href": "01-introduction.html#case-study-digital-soil-mapping-with-random-forests",
    "title": "1  Introduction",
    "section": "1.3 Case-Study: Digital Soil Mapping with Random Forests",
    "text": "1.3 Case-Study: Digital Soil Mapping with Random Forests\nIn this tutorial, we are look at a specific case of spatial upscaling: digital soil mapping using Random Forests. This means that we want to predict soil properties that are difficult and laborious to obtain with a model that predicts such properties smoothly across space by exploiting available spatial data such as climate data. Here’s a short check-list, what a good geo-spatial model should do. It should…\n\n… capture non-linear relations because pedogenesis is a non-linear process.\n… be able to use and predict continuous and categorical variables.\n… handle multiple correlated variables without the risk of over-fitting.\n\n\n\n… build models with good predictive power.\n… result in a sparse model, keeping only relevant predictors.\n… quantify prediction accuracy and uncertainty.\n\nin the next chapters, we use a dataset on basic soil properties from sampling locations across the canton of Bern and pair it up with climatic variables (temperature, precipitation, radiation), terrain attributes (derivatives from digital elevation models like slope, northness, eastness, topographic water index, etc.), geological maps, and soil maps (Nussbaum et al., 2018). The following chapters will cover the preparation of this data (Chapter 2), fitting a Random Forest model (Chapter 3), and evaluating this model (Chapter 4). The final Chapter 5 holds the exercise description of this tutorial.\nIf you want to learn more about the underlying theory and similar techniques, we highly recommend the presentations by Madlene Nussbaum given at the summer school of the OpenGeoHub Foundation (see part 1 and part 2) and here papers (Nussbaum et al. (2018)).\n\n\n\n\nHengl, T., Nussbaum, M., Wright, M. N., Heuvelink, G. B. M., & Gräler, B. (2018). Random forest as a generic framework for predictive modeling of spatial and spatio-temporal variables. PeerJ, 6, e5518. https://doi.org/10.7717/peerj.5518\n\n\nJenny, H. (1994). Factors of soil formation: A system of quantitative pedology. Dover.\n\n\nNussbaum, M., Spiess, K., Baltensweiler, A., Grob, U., Keller, A., Greiner, L., Schaepman, M. E., & Papritz, A. (2018). Evaluation of digital soil mapping approaches with large sets of environmental covariates. SOIL, 4(1), 1–22. https://doi.org/10.5194/soil-4-1-2018\n\n\nNussbaum, M., Walthert, L., Fraefel, M., Greiner, L., & Papritz, A. (2017). Mapping of soil properties at high resolution in Switzerland using boosted geoadditive models. SOIL, 3(4), 191–210. https://doi.org/10.5194/soil-3-191-2017"
  },
  {
    "objectID": "02-data_preparation.html",
    "href": "02-data_preparation.html",
    "title": "2  Preparing Raster Data",
    "section": "",
    "text": "3 Load data on study area\nNow, let’s look at a visualisation of this raster file. Since we selected the slope at 2m resolution, we expect a relief-like map with a color gradient that indicates the steepness of the terrain.\nCode\n# Plot raster example\nterra::plot(raster_example)\nCode\n# To have some more flexibility, we can plot this in the ggplot-style as such:\nggplot2::ggplot() +\n  tidyterra::geom_spatraster(data = raster_example) +\n  ggplot2::scale_fill_viridis_c(\n    na.value = NA,\n    option = \"magma\",\n    name = \"Slope (%) \\n\"\n    ) +\n  ggplot2::theme_bw() +\n  ggplot2::scale_x_continuous(expand = c(0, 0)) +  # avoid gap between plotting area and axis\n  ggplot2::scale_y_continuous(expand = c(0, 0)) +\n  ggplot2::labs(title = \"Slope of the Study Area\")\nThis looks already interesting but we can put our data into a bit more context. For example, a larger map background would be useful to get a better orientation of our location. Also, it would be nice to see where our sampling locations are and to differentiate these locations by whether they are part of the calibration or validation dataset. Bringing this all together requires some more understanding of plotting maps in R. So, don’t worry if you do not understand everything in the code chunk below and enjoy the visualizations:\nCode\n# To get our map working correctly, we have to ensure that all the input data\n# is in the same coordinate system. Since our Bern data is in the Swiss \n# coordinate system, we have to transform the sampling locations to the \n# World Geodetic System first.\n# To look up EPSG Codes: https://epsg.io/\n# World Geodetic System 1984:  4326\n# Swiss CH1903+ / LV95: 2056\n\n# For the raster:\nr &lt;- terra::project(raster_example, \"+init=EPSG:4326\")\n\n# Let's make a function for transforming the sampling locations:\nchange_coords &lt;- function(data, from_CRS, to_CRS) {\n  \n  # Check if data input is correct\n  if (!all(names(data) %in% c(\"id\", \"lat\", \"lon\"))) {\n    stop(\"Input data needs variables: id, lat, lon\")\n  }\n  \n  # Create simple feature for old CRS\n  sf_old_crs &lt;- sf::st_as_sf(data, coords = c(\"lon\", \"lat\"), crs = from_CRS)\n  \n  # Transform to new CRS\n  sf_new_crs     &lt;- sf::st_transform(sf_old_crs, crs = to_CRS)\n  sf_new_crs$lat &lt;- sf::st_coordinates(sf_new_crs)[, \"Y\"]\n  sf_new_crs$lon &lt;- sf::st_coordinates(sf_new_crs)[, \"X\"]\n  \n  sf_new_crs &lt;- sf_new_crs |&gt; dplyr::as_tibble() |&gt; dplyr::select(id, lat, lon)\n  \n  # Return new CRS\n  return(sf_new_crs)\n}\n\n# Transform dataframes\ncoord_cal &lt;- \n  bern_data |&gt; \n  dplyr::filter(dataset == \"calibration\") |&gt; \n  dplyr::select(site_id_unique, x, y) |&gt; \n  dplyr::rename(id = site_id_unique, lon = x, lat = y) |&gt; \n  change_coords(\n    from_CRS = 2056, \n    to_CRS = 4326\n    )\n\ncoord_val &lt;- \n  bern_data |&gt; \n  dplyr::filter(dataset == \"validation\") |&gt; \n  dplyr::select(site_id_unique, x, y) |&gt; \n  dplyr::rename(id = site_id_unique, lon = x, lat = y) |&gt; \n  change_coords(\n    from_CRS = 2056, \n    to_CRS = 4326\n    )\nCode\n# Notes: \n# - This code may only work when installing the development branch of {leaflet}:\n# remotes::install_github('rstudio/leaflet')\n# - You might have to do library(terra) for R to find functions needed in the backend\nlibrary(terra)\n\n# Let's get a nice color palette now for easy reference\npal &lt;- leaflet::colorNumeric(\n  \"magma\",\n  terra::values(r),\n  na.color = \"transparent\"\n  )\n\n# Next, we build a leaflet map\nleaflet::leaflet() |&gt; \n  # As base maps, use two provided by ESRI\n  leaflet::addProviderTiles(leaflet::providers$Esri.WorldImagery, group = \"World Imagery\") |&gt;\n  leaflet::addProviderTiles(leaflet::providers$Esri.WorldTopoMap, group = \"World Topo\") |&gt;\n  # Add our raster file\n  leaflet::addRasterImage(\n    r,\n    colors = pal,\n    opacity = 0.6,\n    group = \"raster\"\n    ) |&gt;\n  # Add markers for sampling locations\n  leaflet::addCircleMarkers(\n    data = coord_cal,\n    lng = ~lon,  # Column name for x coordinates\n    lat = ~lat,  # Column name for y coordinates\n    group = \"training\",\n    color = \"black\"\n  ) |&gt;\n    leaflet::addCircleMarkers(\n    data = coord_val,\n    lng = ~lon,  # Column name for x coordinates\n    lat = ~lat,  # Column name for y coordinates\n    group = \"validation\",\n    color = \"red\"\n  ) |&gt;\n  # Add some layout and legend\n  leaflet::addLayersControl(\n    baseGroups = c(\"World Imagery\",\"World Topo\"),\n    position = \"topleft\",\n    options = leaflet::layersControlOptions(collapsed = FALSE),\n    overlayGroups = c(\"raster\", \"training\", \"validation\")\n    ) |&gt;\n  leaflet::addLegend(\n    pal = pal,\n    values = terra::values(r),\n    title = \"Slope (%)\")\nThat looks great! At first glance, it is a bit crowded but once you scroll in you can investigate our study area quite nicely. You can check whether the slope raster file makes sense by comparing it against the base maps. Can you see how cliffs along the Aare river, hills, and even gravel quarries show high slopes? We also see that our validation dataset is nicely distributed across the area covered by the training dataset.\nNow that we have played with a few visualizations, let’s get back to preparing our data. The {terra} package comes with the very useful tool to stack multiple raster on top of each other, if they are of the same spatial format. To do so, we just have to feed in the vector of file names list_raster_subset:\nCode\n# Load all files as one batch\nall_rasters &lt;- terra::rast(list_raster_subset)\nall_rasters\n\n\nclass       : SpatRaster \ndimensions  : 986, 2428, 15  (nrow, ncol, nlyr)\nresolution  : 20, 20  (x, y)\nextent      : 2568140, 2616700, 1200740, 1220460  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903+ / LV95 \nsources     : geo500h1id.tif  \n              Se_n_aspect2m.tif  \n              mt_rr_y.tif  \n              ... and 12 more source(s)\nnames       : geo500h1id, Se_n_~ect2m, mt_rr_y, Se_cu~td_5c,   vdcn25,      lsf, ... \nmin values  :          1,          -1,  9804.2,      0.0000,   0.0000,   0.0650, ... \nmax values  :         99,           1, 15392.6,    467.5855, 324.2082, 152.3634, ...\nNow, we do not want to have the covariates’ data from all cells in the raster file. Rather, we want to reduce our stacked rasters to the x and y coordinates for which we have soil sampling data. We can do this using the terra::extract() function. Then, we want to merge the two dataframes of soil data and covariates data by their coordinates. Since the order of the covariate data is the same as the Bern data, we can simply bind their columns with cbind():\nCode\n# Extract coordinates from sampling locations\nsampling_xy &lt;- bern_data |&gt; dplyr::select(x, y)\n\n# From all rasters, extract values for sampling coordinates\ncovar_data &lt;- \n  terra::extract(all_rasters,  # The raster we want to extract from\n                 sampling_xy,  # A matrix of x and y values to extract for\n                 ID = FALSE    # To not add a default ID column to the output\n                 )\n\nfinal_data &lt;- cbind(bern_data, covar_data)\nhead(final_data) |&gt; knitr::kable() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsite_id_unique\ntimeset\nx\ny\ndataset\ndclass\nwaterlog.30\nwaterlog.50\nwaterlog.100\nph.0.10\nph.10.30\nph.30.50\nph.50.100\ngeo500h1id\nSe_n_aspect2m\nmt_rr_y\nSe_curvplan2m_std_5c\nvdcn25\nlsf\nSe_conv2m\nSe_slope2m\nSe_MRVBF2m\nSe_curvprof2m_fmean_50c\nSe_diss2m_50c\nSe_vrm2m\nSe_curvplan2m\nSe_SAR2m\nSe_curv6m\n\n\n\n\n4_26-In-005\nd1968_1974_ptf\n2571994\n1203001\nvalidation\npoor\n0\n0\n1\n6.071733\n6.227780\n7.109235\n7.214589\n6\n-0.2402939\n9931.120\n0.6229440\n65.62196\n0.0770846\n-40.5395088\n1.1250136\n6.950892\n-0.0382753\n0.3934371\n0.0002450\n-1.0857303\n4.000910\n-0.5886537\n\n\n4_26-In-006\nd1974_1978\n2572149\n1202965\ncalibration\npoor\n0\n1\n1\n6.900000\n6.947128\n7.203502\n7.700000\n6\n0.4917848\n9931.672\n2.2502327\n69.16074\n0.0860347\n19.0945148\n1.3587183\n6.984581\n-0.0522900\n0.4014700\n0.0005389\n-0.3522736\n4.001326\n0.1278165\n\n\n4_26-In-012\nd1974_1978\n2572937\n1203693\ncalibration\nmoderate\n0\n1\n1\n6.200000\n6.147128\n5.603502\n5.904355\n6\n-0.9633239\n9935.438\n0.2292406\n63.57096\n0.0737963\n-9.1396294\n0.7160403\n6.990917\n-0.0089129\n0.6717541\n0.0000124\n-0.2168447\n4.000320\n-0.0183221\n\n\n4_26-In-014\nd1974_1978\n2573374\n1203710\nvalidation\nwell\n0\n0\n0\n6.600000\n6.754607\n7.200000\n7.151129\n6\n-0.4677161\n9939.923\n0.1029889\n64.60535\n0.0859686\n-0.9318936\n0.8482135\n6.964162\n-0.0331309\n0.4988544\n0.0000857\n-0.0272214\n4.000438\n-0.0706228\n\n\n4_26-In-015\nd1968_1974_ptf\n2573553\n1203935\nvalidation\nmoderate\n0\n0\n1\n6.272715\n6.272715\n6.718392\n7.269008\n6\n0.5919228\n9942.032\n0.9816071\n61.16533\n0.0650000\n4.2692256\n1.2301254\n6.945287\n-0.0202268\n0.6999696\n0.0002062\n0.2968794\n4.000948\n0.0476020\n\n\n4_26-In-016\nd1968_1974_ptf\n2573310\n1204328\ncalibration\npoor\n0\n0\n1\n6.272715\n6.160700\n5.559031\n5.161655\n6\n0.5820994\n9940.597\n0.3455668\n55.78354\n0.0731646\n-0.1732794\n1.0906221\n6.990967\n-0.0014042\n0.3157751\n0.0001151\n0.0100844\n4.000725\n0.0400775\nGreat that worked without problems!\nNow, not all our covariates may be continuous variables and therefore have to be encoded as factors. As an easy check, we can take the original corvariates data and check for the number of unique values in each raster. If the variable is continuous, we expect that there are a lot of different values - at maximum 1052 different values because we have that many entries. So, let’s have a look and assume that variables with 10 or less different values are categorical variables.\nCode\ncat_vars &lt;- \n  covar_data |&gt; \n  # Get number of distinct values per variable\n  dplyr::summarise(dplyr::across(dplyr::everything(), ~ dplyr::n_distinct(.))) |&gt; \n  # Turn df into long format for easy filtering\n  tidyr::pivot_longer(dplyr::everything(), \n                      names_to = \"variable\", \n                      values_to = \"n\") |&gt; \n  # Filter out variables with 10 or less distinct values\n  dplyr::filter(n &lt;= 10) |&gt;\n  # Extract the names of these variables\n  dplyr::pull('variable')\n\ncat(\"Variables with less than 10 distinct values:\", \n    ifelse(length(cat_vars) == 0, \"none\", cat_vars))\n\n\nVariables with less than 10 distinct values: geo500h1id\nNow that we have the names of the categorical values, we can mutate these columns in our df using the base function as.factor():\nCode\nfinal_data &lt;- \n  final_data |&gt; \n  dplyr::mutate(dplyr::across(cat_vars, ~ as.factor(.)))\nWe are almost done with our data preparation, we just need to reduce it to sampling locations for which we have a decent amount of data on the covariates. Else, we blow up the model calibration with data that is not informative enough.\nCode\n# Get number of rows to calculate percentages\nn_rows &lt;- nrow(final_data)\n\n# Get number of distinct values per variable\nfinal_data |&gt; \n  dplyr::summarise(dplyr::across(dplyr::everything(), \n                                 ~ length(.) - sum(is.na(.)))) |&gt; \n  tidyr::pivot_longer(dplyr::everything(), \n                      names_to = \"variable\", \n                      values_to = \"n\") |&gt;\n  dplyr::mutate(perc_available = round(n / n_rows * 100)) |&gt; \n  dplyr::arrange(perc_available) |&gt; \n  head(10) |&gt; \n  knitr::kable()\n\n\n\n\n\nvariable\nn\nperc_available\n\n\n\n\nph.30.50\n856\n81\n\n\nph.10.30\n866\n82\n\n\nph.50.100\n859\n82\n\n\ntimeset\n871\n83\n\n\nph.0.10\n870\n83\n\n\ndclass\n1006\n96\n\n\nsite_id_unique\n1052\n100\n\n\nx\n1052\n100\n\n\ny\n1052\n100\n\n\ndataset\n1052\n100\nThis looks good, we have no variable with a substantial amount of missing data. Generally, only pH measurements are lacking, which we should keep in mind when making predictions and inferences. Another great way to explore your data, is using the {visdat} package:\nCode\nfinal_data |&gt; visdat::vis_miss()\nAlright, we see that we are not missing any data in the covariate data. Mostly sampled data, specifically pH and timeset data is missing. We also see that this missing data is mostly from the same entry, so if we keep only entries where we have pH data - which is what we are interested here - we have a dataset with pracitally no missing data.\nCode\nsaveRDS(final_data, \n        here::here(\"data/bern_sampling_locations_with_covariates.rds\"))"
  },
  {
    "objectID": "02-data_preparation.html#soil-samples",
    "href": "02-data_preparation.html#soil-samples",
    "title": "2  Preparing Raster Data",
    "section": "3.1 Soil samples",
    "text": "3.1 Soil samples\n\n\nCode\n# Load soil data from sampling locations\nbern_data &lt;- readr::read_csv(\n  here::here(\"data-raw/soildata/berne_soil_sampling_locations.csv\")\n  )\n\n# Display data\nhead(bern_data) |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsite_id_unique\ntimeset\nx\ny\ndataset\ndclass\nwaterlog.30\nwaterlog.50\nwaterlog.100\nph.0.10\nph.10.30\nph.30.50\nph.50.100\n\n\n\n\n4_26-In-005\nd1968_1974_ptf\n2571994\n1203001\nvalidation\npoor\n0\n0\n1\n6.071733\n6.227780\n7.109235\n7.214589\n\n\n4_26-In-006\nd1974_1978\n2572149\n1202965\ncalibration\npoor\n0\n1\n1\n6.900000\n6.947128\n7.203502\n7.700000\n\n\n4_26-In-012\nd1974_1978\n2572937\n1203693\ncalibration\nmoderate\n0\n1\n1\n6.200000\n6.147128\n5.603502\n5.904355\n\n\n4_26-In-014\nd1974_1978\n2573374\n1203710\nvalidation\nwell\n0\n0\n0\n6.600000\n6.754607\n7.200000\n7.151129\n\n\n4_26-In-015\nd1968_1974_ptf\n2573553\n1203935\nvalidation\nmoderate\n0\n0\n1\n6.272715\n6.272715\n6.718392\n7.269008\n\n\n4_26-In-016\nd1968_1974_ptf\n2573310\n1204328\ncalibration\npoor\n0\n0\n1\n6.272715\n6.160700\n5.559031\n5.161655\n\n\n\n\n\nThe dataset on soil samples from Bern holds 13 variables for 1052 entries (more information here):\n\nsite_id_unique: The location’s unique site id.\ntimeset: The sampling year and information on sampling type for soil pH (no label: CaCl\\(_2\\) laboratory measurement, field: indicator solution used in field, ptf: H\\(_2\\)O laboratory measurement transferred by pedotransfer function).\nx: The x (easting) coordinates in meters following the (CH1903/LV03) system.\ny: The y (northing) coordinates in meters following the (CH1903/LV03) system.\ndataset: Specification whether a sample is used for model calibration or validation (this is based on randomization to ensure even spatial coverage).\ndclass: Soil drainage class\nwaterlog.30, waterlog.50, waterlog.100: Specification whether soil was water logged at 30, 50, or 100 cm depth (0 = No, 1 = Yes).\nph.0.10, ph.10.30, ph.30.50, ph.50.100: Average soil pH between 0-10, 10-30, 30-50, and 50-100 cm depth.\n\n\n3.1.1 Covariate data\nNow, let’s load all the covariates that we want to produce our soil maps with.\n\n\nCode\n# Get a list with the path to all raster files\nlist_raster &lt;- \n  base::list.files(\n    here::here(\"data-raw/geodata/covariates/\"),\n    full.names = T\n  )\n\n# Take a random subset\nset.seed(3)\nlist_raster_subset &lt;- list_raster |&gt; sample(15)\n\n# Display data (lapply to clean names)\nlapply(\n  list_raster_subset, \n  function(x) sub(\".*/(.*)\", \"\\\\1\", x)\n  ) |&gt; \n  unlist() |&gt; \n  head(5) |&gt; \n  print()\n\n\n[1] \"geo500h1id.tif\"           \"Se_n_aspect2m.tif\"       \n[3] \"mt_rr_y.tif\"              \"Se_curvplan2m_std_5c.tif\"\n[5] \"vdcn25.tif\"              \n\n\nThe output above shows the first five raster files with rather cryptic names. The meaning of all 91 raster files are given in Chapter 6. So, make sure to have a look at the list there as it will help you to interpret your model results later on. Let’s look at one of these raster files to get a better feeling for our data. Specifically, let’s look at the slope profile at 2m resolution:\n\n\nCode\n# Load a raster file as example: Picking the slope profile at 2m resolution\nraster_example &lt;- terra::rast(list_raster[74])\nraster_example\n\n\nclass       : SpatRaster \ndimensions  : 986, 2428, 1  (nrow, ncol, nlyr)\nresolution  : 20, 20  (x, y)\nextent      : 2568140, 2616700, 1200740, 1220460  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903+ / LV95 \nsource      : Se_slope2m.tif \nname        : Se_slope2m \nmin value   :    0.00000 \nmax value   :   85.11286 \n\n\nAs shown in the output, a raster object has the following properties (among others, see ?terra::rast):\n\nclass: The class of the file, here a SpatRaster.\ndimensions: The number of rows, columns, years (if temporal encoding).\nresolution: The resolution of the coordinate system, here it is 20 in both axes.\nextent: The extent of the coordinate system defined by min and max values on the x and y axes.\ncoord. ref.: Reference coordinate system. Here, the raster is encoded using the LV95 geodetic reference system from which the projected coordinate system CH1903+ is derived.\nsource: The name of the source file.\nnames: The name of the raster file (mostly the file name without file-specific ending)\nmin value: The lowest value of all cells.\nmax value: The highest value of all cells.\n\n\n\n\n\n\n\nTip\n\n\n\nThe code chunks filtered for a random sub-sample of 15 variables. As described in Chapter 5, your task will be to investigate all covariates and find the ones that can best be used for your modelling task."
  },
  {
    "objectID": "03-model_training.html#load-data",
    "href": "03-model_training.html#load-data",
    "title": "3  Train a Random Forest",
    "section": "3.1 Load data",
    "text": "3.1 Load data\nIn the previous Chapter, we create a dataframe that holds information on the soil sampling locations and the covariates that we extracted for these positions. Let’s load this datafarme into our environment\n\n\nCode\ndata_clean &lt;- readRDS(here::here(\"data/bern_sampling_locations_with_covariates.rds\"))\n\nhead(data_clean) |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsite_id_unique\ntimeset\nx\ny\ndataset\ndclass\nwaterlog.30\nwaterlog.50\nwaterlog.100\nph.0.10\nph.10.30\nph.30.50\nph.50.100\ngeo500h1id\nSe_n_aspect2m\nmt_rr_y\nSe_curvplan2m_std_5c\nvdcn25\nlsf\nSe_conv2m\nSe_slope2m\nSe_MRVBF2m\nSe_curvprof2m_fmean_50c\nSe_diss2m_50c\nSe_vrm2m\nSe_curvplan2m\nSe_SAR2m\nSe_curv6m\n\n\n\n\n4_26-In-005\nd1968_1974_ptf\n2571994\n1203001\nvalidation\npoor\n0\n0\n1\n6.071733\n6.227780\n7.109235\n7.214589\n6\n-0.2402939\n9931.120\n0.6229440\n65.62196\n0.0770846\n-40.5395088\n1.1250136\n6.950892\n-0.0382753\n0.3934371\n0.0002450\n-1.0857303\n4.000910\n-0.5886537\n\n\n4_26-In-006\nd1974_1978\n2572149\n1202965\ncalibration\npoor\n0\n1\n1\n6.900000\n6.947128\n7.203502\n7.700000\n6\n0.4917848\n9931.672\n2.2502327\n69.16074\n0.0860347\n19.0945148\n1.3587183\n6.984581\n-0.0522900\n0.4014700\n0.0005389\n-0.3522736\n4.001326\n0.1278165\n\n\n4_26-In-012\nd1974_1978\n2572937\n1203693\ncalibration\nmoderate\n0\n1\n1\n6.200000\n6.147128\n5.603502\n5.904355\n6\n-0.9633239\n9935.438\n0.2292406\n63.57096\n0.0737963\n-9.1396294\n0.7160403\n6.990917\n-0.0089129\n0.6717541\n0.0000124\n-0.2168447\n4.000320\n-0.0183221\n\n\n4_26-In-014\nd1974_1978\n2573374\n1203710\nvalidation\nwell\n0\n0\n0\n6.600000\n6.754607\n7.200000\n7.151129\n6\n-0.4677161\n9939.923\n0.1029889\n64.60535\n0.0859686\n-0.9318936\n0.8482135\n6.964162\n-0.0331309\n0.4988544\n0.0000857\n-0.0272214\n4.000438\n-0.0706228\n\n\n4_26-In-015\nd1968_1974_ptf\n2573553\n1203935\nvalidation\nmoderate\n0\n0\n1\n6.272715\n6.272715\n6.718392\n7.269008\n6\n0.5919228\n9942.032\n0.9816071\n61.16533\n0.0650000\n4.2692256\n1.2301254\n6.945287\n-0.0202268\n0.6999696\n0.0002062\n0.2968794\n4.000948\n0.0476020\n\n\n4_26-In-016\nd1968_1974_ptf\n2573310\n1204328\ncalibration\npoor\n0\n0\n1\n6.272715\n6.160700\n5.559031\n5.161655\n6\n0.5820994\n9940.597\n0.3455668\n55.78354\n0.0731646\n-0.1732794\n1.0906221\n6.990967\n-0.0014042\n0.3157751\n0.0001151\n0.0100844\n4.000725\n0.0400775"
  },
  {
    "objectID": "03-model_training.html#preparations",
    "href": "03-model_training.html#preparations",
    "title": "3  Train a Random Forest",
    "section": "3.2 Preparations",
    "text": "3.2 Preparations\nBefore we can fit the model, we have to specify a few settings. First, we have to specify our response and predictor variables. Then, we have to split our dataset into a calibration and a validation set. Random Forest models cannot deal with NA values, so we have to remove these from our calibration set.\n\n\nCode\n# Specify response: The pH in the top 10cm\nresponse &lt;- \"ph.0.10\"\n\n# Specify predictors: Remove soil sampling information\npredictors &lt;- \n  data_clean |&gt; \n  dplyr::select(-response,                             # Remove response variable\n                -site_id_unique,                       # Remove site ID\n                -tidyr::starts_with(\"ph\"),             # No pH information\n                -tidyr::starts_with(\"waterlog\"),       # No water-status information\n                -dclass,                               # No water-status information\n                -dataset) |&gt;                           # No calib./valid information\n  names()\n\ncat(\"The response is:\", response,\n    \"\\nThe predictors are:\", paste0(predictors[1:8], sep = \", \"), \"...\")\n\n\nThe response is: ph.0.10 \nThe predictors are: timeset,  x,  y,  geo500h1id,  Se_n_aspect2m,  mt_rr_y,  Se_curvplan2m_std_5c,  vdcn25,  ...\n\n\n\n\nCode\n# Split dataset into calibration and validation\ndata_cal &lt;- data_clean |&gt; dplyr::filter(dataset == \"calibration\")\ndata_val &lt;- data_clean |&gt; dplyr::filter(dataset == \"validation\")\n\n# Filter out any NA to avoid error when running a Random Forest\ndata_cal &lt;- data_cal |&gt; tidyr::drop_na()\ndata_val &lt;- data_val |&gt; tidyr::drop_na()\n\n# A little bit of verbose output:\nn_tot &lt;- nrow(data_cal) + nrow(data_val)\n\nperc_cal &lt;- (nrow(data_cal) / n_tot) |&gt; round(2) * 100\nperc_val &lt;- (nrow(data_val) / n_tot) |&gt; round(2) * 100\n\ncat(\"For model training, we have a calibration / validation split of: \",\n    perc_cal, \"/\", perc_val, \"%\")\n\n\nFor model training, we have a calibration / validation split of:  75 / 25 %\n\n\nAlright, this looks all good. We have our response and predictor variables saved for easy access later on and the 75/25 split of calibration and validation data looks good too. We can now move on to model fitting!"
  },
  {
    "objectID": "03-model_training.html#model-training",
    "href": "03-model_training.html#model-training",
    "title": "3  Train a Random Forest",
    "section": "3.3 Model training",
    "text": "3.3 Model training\nTo fit a Random Forest model that predicts the soil pH in the top 10cm, we are looking at different model setups. These setups always train a Random Forest model but differ in the complexity that we intentionally add to improve the final model. If you need a recap on Random Forests, have a look at the introduction given in AGDS 1.\n\n3.3.1 Basic model\nLet’s start with the basic model, where we use the {ranger} package with the pre-defined hyperparameters.\n\n\nCode\n# ranger() crashes when using tibbles, so we are using the\n# base R notation to enter the data\n\nrf_basic &lt;- ranger::ranger( \n  y = data_cal[, response],   # Response variable\n  x = data_cal[, predictors], # Predictor variables\n  seed = 42,                  # Specify the seed for randomization to reproduce the same model again\n  num.threads = parallel::detectCores() - 1) # Use all but one CPU core for quick model training\n\n# Print a summary of fitted model\nrf_basic |&gt; print()\n\n\nRanger result\n\nCall:\n ranger::ranger(y = data_cal[, response], x = data_cal[, predictors],      seed = 42, num.threads = parallel::detectCores() - 1) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      605 \nNumber of independent variables:  18 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       0.2821088 \nR squared (OOB):                  0.5224995 \n\n\n\n\n\n\n\n\nPredicting categories with Random Forests\n\n\n\nIf our response variable was a categorical and not a continuous variable, we would have to set the argument probability = TRUE. The output would then be a probability map from 0-100%.\n\n\nAlthough we only used the pre-defined parameters, we already get a fairly good out-of-bag (OOB) \\(R^2\\) of 0.53 and a MSE of 0.28. Let’s see how we can improve our model further.\n\n\n3.3.2 Model with weights\nSometimes we know that a subset of our dataset is more trustworthy than the rest. For example, when you are using a gap-filling technique to interpolate data, that gap-filled data is less trustworthy than the actually measured data. Informing the model algorithm that it should weigh certain data entries more than other can change the importance of variables and the final model performance.\nIn our dataset, we have information on whether the pH values were measured in the field - which is less precise - or in the lab. Also, we have to different lab methods. All of this information is held in the suffix of the timeset variable, so let’s assign weights according on the quality of the pH data as follows: 1 for CaCl\\(_2\\) lab measurement (no suffix), 0.9 for pedotransfer from another lab method (suffix _ptf), and 0.7 for field data (suffix _field). For this, we create a weight-matching vector:\n\n\nCode\nweights &lt;- \n  data_cal |&gt;\n  dplyr::mutate(\n    # Create a new variable 'weight' which holds only 1's\n    w = 1,\n    # Check the suffix in each row and if true, give a new weight. If false, keep the old weight.\n    w = ifelse(stringr::str_detect(timeset, \"_field\"), 0.9, w),\n    w = ifelse(stringr::str_detect(timeset, \"_ptf\"), 0.7, w)\n  )\n\n# Quality check if everything worked:\nset.seed(42)\n\nweights |&gt; \n  dplyr::select(timeset, w) |&gt; \n  dplyr::slice_sample(n = 8) |&gt;   # Pick 8 random rows\n  knitr::kable()\n\n\n\n\n\ntimeset\nw\n\n\n\n\nd1979_2010\n1.0\n\n\nd1968_1974_field\n0.9\n\n\nd1968_1974_field\n0.9\n\n\nd1968_1974_field\n0.9\n\n\nd1968_1974_field\n0.9\n\n\nd1968_1974_ptf\n0.7\n\n\nd1968_1974_field\n0.9\n\n\nd1968_1974_field\n0.9\n\n\n\n\n\nIt is always a good idea to do quality checks when wrangling! Here we see that our weight attribution code worked as expected, so we can move on to model fitting.\n\n\nCode\nrf_weighted &lt;- ranger::ranger( \n  y = data_cal[, response],      # Response variable\n  x = data_cal[, predictors],    # Predictor variables\n  case.weights = weights[, \"w\"], # Add weights to input\n  seed = 42,                     # Specify seed for randomization to reproduce the same model again\n  num.threads = parallel::detectCores() - 1) # Use all but one CPU core for quick model training\n\n# Print a summary of fitted model\nrf_weighted |&gt; print()\n\n\nRanger result\n\nCall:\n ranger::ranger(y = data_cal[, response], x = data_cal[, predictors],      case.weights = weights[, \"w\"], seed = 42, num.threads = parallel::detectCores() -          1) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      605 \nNumber of independent variables:  18 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       0.2809047 \nR squared (OOB):                  0.5245376 \n\n\nNot much has changed compared to our previous model. We see that the \\(R^2\\) and MSE got negligibly worse but as a trade-off we gained more trust in our model."
  },
  {
    "objectID": "03-model_training.html#model-interpretation",
    "href": "03-model_training.html#model-interpretation",
    "title": "3  Train a Random Forest",
    "section": "3.4 Model interpretation",
    "text": "3.4 Model interpretation\n\n3.4.1 Variable importance based on OOB-Error\nOur model has 98 variables but we have no idea if each of them should really be in the model and if we are not just fitting noise in the dataset. To investigate this issue, the ranger() function takes an argument called importance. We can set this argument either to follow the permutation method, whereby the algorithm randomly permutes values of each variable and measures the resulting decrease in model accuracy. A larger decrease indicates a more important variable. If the code runs slow, you can also use the faster impurity method (see more information here).\nAssessing the variable importance gives us a feeling for what variables we should keep or drop from the dataset. The ranger-model stores this information if we enter a importance method. The code below accesses the model’s variable importance and sorts the variables with decreasing importance.\n\n\nCode\n# Let's run the weighted model again but with recording the variable importance\nrf_weighted &lt;- ranger::ranger( \n  y = data_cal[, response],     # Response variable\n  x = data_cal[, predictors],   # Predictor variables\n  case.weights = weights[, \"w\"],# Add weights to input\n  importance   = \"permutation\", # Pick permutation to calculate variable importance\n  seed = 42,                    # Specify seed for randomization to reproduce the same model again\n  num.threads = parallel::detectCores() - 1) # Use all but one CPU core for quick model training\n\n# Extract the variable importance and create a long tibble\nvi_rf_weighted &lt;- \n  rf_weighted$variable.importance |&gt;\n  dplyr::bind_rows() |&gt; \n  tidyr::pivot_longer(cols = dplyr::everything(), names_to = \"variable\")\n\n# Plot variable importance, ordered by decreasing value\np &lt;- \n  vi_rf_weighted |&gt; \n  ggplot2::ggplot(ggplot2::aes(x = reorder(variable, value), y = value)) +\n  ggplot2::geom_bar(stat = \"identity\", fill = \"grey50\", width = 0.75) + \n  ggplot2::labs(\n    y = \"Change in OOB MSE after permutation\", \n    x = \"\",\n    title = \"Change in OOB MSE after permutation\") +\n  ggplot2::theme_classic() +\n  ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))\n\n# Display plot\np\n\n\n\n\n\nWhat do we see here? The y-axis shows the decrease in model performance when the respective variable is randomly permuted and, therefore, denotes the importance of a variable. The higher the value, the stronger the effect of permutation on the model performance, the more important the variable. In our randomly picked subset of covariates, we see that the time of sampling, the location (x and y coordinates), and the mean annual precipitation are very strong predictors of soil pH. From a soil-forming perspective, this seems plausible. For example, soil weathering is strongly driven by water. So, the more water a location receives, the more weather a soil is, the more likely it has a low pH. To dig deeper into understanding how the model works, we could further investigate its partial dependence plos.\nWe can also see that a large part of our covariates have practically no power to predict the pH and can therefore be removed from the model. But how do we determine what variable to pick for our final model? Do we want a maximum number of predictors? Do we want a set of the top n predictors that make up a certain percentage of the total variable importance?\n\n\n3.4.2 Boruta Algorithm\nOne common option to generalize variable selection is the “Boruta-Algorithm”, which itself is based Random Forests. In essence, the algorithm creates “shadows” of your original data, where each of the predictor value is randomly permuted, which destroys the predictive power of the variable. Then, the algorithm iterates over these “shadows” and assess for each variable whether its permutation has a substantial effect on the model performance or not. E.g., if a model trained on a variable’s shadow performs constantly worse than when trained on the original values, that variable is assessed as important. The algorithm categorizes all variables into “to reject”, “to consider”, and “to keep”. Luckily, we do not have to write this algorithm ourselves but can use the {Boruta} package:\n\n\nCode\nset.seed(42)\nbor &lt;- \n  Boruta::Boruta(\n    y = data_cal[, response], \n    x = data_cal[, predictors],\n    maxRuns = 50, # Number of iterations. Set to 30 or lower if it takes too long\n    num.threads = parallel::detectCores()-1)\n\n# Plot variable importance, the Boruta-output can be directly fed into base R plot()\npar(oma = c(8,3,2,2)) # enlarge plot below for long variable labels\nplot(bor, \n     xlab = \"\", \n     ylab = \"Importance\",\n     las = 2,\n     )\n\n\n\n\n\n\n\nCode\n# Check whether the most important variables from Boruta-Algorithm are similar as the\n# important variables from the weighted Random Forest model\nbor_top10 &lt;- \n  Boruta::attStats(bor) |&gt; \n  tibble::rownames_to_column() |&gt; \n  dplyr::arrange(dplyr::desc(meanImp)) |&gt; \n  dplyr::slice_head(n = 10) |&gt; \n  dplyr::pull(rowname)\n\nvi_top10 &lt;- \n  vi_rf_weighted |&gt; \n  dplyr::slice_head(n = 10) |&gt; \n  dplyr::pull(variable)\n\ncbind(vi_top10, bor_top10) |&gt; \n  knitr::kable(col.names = c(\"RF Top 10\", \"Boruta Top 10\"))\n\n\n\n\n\nRF Top 10\nBoruta Top 10\n\n\n\n\ntimeset\ntimeset\n\n\nx\nmt_rr_y\n\n\ny\nx\n\n\ngeo500h1id\ny\n\n\nSe_n_aspect2m\nSe_curvplan2m_std_5c\n\n\nmt_rr_y\nvdcn25\n\n\nSe_curvplan2m_std_5c\nlsf\n\n\nvdcn25\nSe_MRVBF2m\n\n\nlsf\ngeo500h1id\n\n\nSe_conv2m\nSe_diss2m_50c\n\n\n\n\n\nWe see that apart from the timeset variable, the variable importance calculated by the Boruta-Algorithm differs quite a bit, compared to the simple variable importance assessment built into the ranger() function. To move forward, we could keep only variables that were classified as “to keep” or “to consider” by the Boruta-Algorithm:\n\n\nCode\npredictors_bor &lt;- \n  bor$finalDecision |&gt; \n  as.data.frame(nm = \"assessment\") |&gt; \n  tibble::rownames_to_column(var = \"variable\") |&gt; \n  dplyr::filter(assessment != \"Rejected\") |&gt; \n  dplyr::pull(variable)\n\n\nFor this tutorial, we are happy to continue with our most basic Random Forest and save all necessary data as shown below. However, as shown with the model using weights, with the variable selection of the Boruta method, and with applying hyper-parameter tuning and cross-validation for a more robust model, there are many options to create a better model.\n\n\nCode\n# Save relevant data for model testing in the next chapter.\n# Pick rf to save:\nrf &lt;- rf_basic\n\n# Extract predictors used in this rf\npredictors &lt;- rf$forest$independent.variable.names\n\nsaveRDS(rf_basic,                   \n        here::here(\"data/rf_for_ph0-10.rds\"))\n\nsaveRDS(data_cal[, c(response, predictors)],\n        here::here(\"data/cal_for_ph0-10.rds\"))\n\nsaveRDS(data_val[, c(response, predictors)],\n        here::here(\"data/val_for_ph0-10.rds\"))"
  },
  {
    "objectID": "04-model_test.html#load-model-and-data",
    "href": "04-model_test.html#load-model-and-data",
    "title": "4  Model Analysis",
    "section": "4.1 Load model and data",
    "text": "4.1 Load model and data\n\n\nCode\n# Load random forest model\nrf       &lt;- readRDS(here::here(\"data/rf_for_pH0-10.rds\"))\ndata_cal &lt;- readRDS(here::here(\"data/cal_for_ph0-10.rds\"))\ndata_val &lt;- readRDS(here::here(\"data/val_for_ph0-10.rds\"))\n\n\nOur target area to predict over is defined in the file area_to_be_mapped.tif. Since we only want to predict on a given study area, the TIF file comes with a labeling of 0 for pixels that are outside the area of interest and 1 for pixels within the area of interest.\n\n\nCode\n# Load area to be predicted\ntarget_raster &lt;- terra::rast(here::here(\"data-raw/geodata/study_area/area_to_be_mapped.tif\"))\n\n# Turn target raster into a dataframe, 1 px = 1 cell\ntarget_df &lt;- as.data.frame(target_raster, xy = TRUE)\n\n# Filter only for area of interest\ntarget_df &lt;- target_df |&gt; dplyr::filter(area_to_be_mapped == 1)\n\n# Display df\nhead(target_df) |&gt; knitr::kable()\n\n\n\n\n\nx\ny\narea_to_be_mapped\n\n\n\n\n2587670\n1219750\n1\n\n\n2587690\n1219750\n1\n\n\n2587090\n1219190\n1\n\n\n2587090\n1219170\n1\n\n\n2587110\n1219170\n1\n\n\n2587070\n1219150\n1\n\n\n\n\n\nNext, we have to load the relevant covariates to run our model:\n\n\n\n\n\n\nWarning\n\n\n\nOur basic RandomForest model has not undergone any variable selection, so we are loading almost 100 covariates here. However, as discussed during the model training step, it is not sensible to use all covariates at hand.\n\n\n\n\nCode\n# Get a list of all covariate file names\ncovariate_files &lt;- \n  list.files(path = here::here(\"data-raw/geodata/covariates/\"), \n             pattern = \".tif$\",\n             recursive = TRUE, \n             full.names = TRUE\n             )\n\n# Filter that list only for the variables used in the RF\nused_cov &lt;- rf$forest$independent.variable.names\ncov_to_load &lt;- c()\n\nfor (i_var in used_cov) {\n  i &lt;- covariate_files[stringr::str_detect(covariate_files, \n                                           paste0(\"/\", i_var, \".tif\"))]\n  cov_to_load &lt;- append(cov_to_load, i)\n  \n  # cat(\"\\nfor var \", i_var, \" load file: \", i)\n}\n\n# Load all rasters as a stack\ncov_raster &lt;- terra::rast(cov_to_load)\n\n# Get coordinates for which we want data\nsampling_xy &lt;- target_df |&gt; dplyr::select(x, y)\n\n# Extract data from covariate raster stack\ncov_df &lt;-\n  terra::extract(cov_raster,  # The raster we want to extract from\n                 sampling_xy,  # A matrix of x and y values to extract for\n                 ID = FALSE    # To not add a default ID column to the output\n                 )\n\ncov_df &lt;- cbind(sampling_xy, cov_df)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Attaching reference timeset levels from prepared dataset\nbern_cov &lt;- readRDS(here::here(\"data/bern_sampling_locations_with_covariates.rds\"))\n\ncov_df$timeset &lt;- \"d1979_2010\"\nlevels(cov_df$timeset) &lt;- c(unique(bern_cov$timeset))\n\n# Define numerically variables \ncat_vars &lt;- \n  cov_df |&gt; \n  # Get number of distinct values per variable\n  dplyr::summarise(dplyr::across(dplyr::everything(), ~ dplyr::n_distinct(.))) |&gt; \n  # Turn df into long format for easy filtering\n  tidyr::pivot_longer(dplyr::everything(), \n                      names_to = \"variable\", \n                      values_to = \"n\") |&gt; \n  # Filter out variables with 10 or less distinct values\n  dplyr::filter(n &lt;= 10) |&gt;\n  # Extract the names of these variables\n  dplyr::pull('variable')\n\n# Define categorical variables \ncov_df &lt;- \n  cov_df |&gt; \n  dplyr::mutate(dplyr::across(cat_vars, ~ as.factor(.)))\n\n# Reduce dataframe to hold only rows without any NA values\ncov_df &lt;- \n  cov_df |&gt; \n  tidyr::drop_na()\n\n# Display final dataframe\nhead(cov_df) |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\ny\nSe_curvplan2m_fmean_50c\nSe_tpi_2m_5c\nSe_e_aspect2m_5c\nmt_tt_y\nSe_SCA2m\nSe_curvprof2m_s60\nSe_e_aspect25m\nSe_curvprof2m_s7\ntsc25_18\nSe_curv2m_std_50c\nSe_slope2m_fmean_5c\nSe_n_aspect2m_5c\nmrrtf25\nSe_slope2m_std_50c\nSe_curv2m_std_5c\ntimeset\n\n\n\n\n2587670\n1219750\n-0.0230801\n0.3968636\n0.0523264\n94\n22.039053\n0.0286316\n-0.0730021\n-1.1700106\n0.4671952\n5.627444\n8.8745193\n0.9984013\n0.1075638\n4.443856\n8.208909\nd1979_2010\n\n\n2587690\n1219750\n-0.0118661\n-0.0899814\n0.0261770\n94\n274.031982\n0.0085285\n-0.1002210\n0.3911650\n0.4697721\n5.807981\n6.7173972\n0.9996192\n0.1490467\n4.420249\n2.624915\nd1979_2010\n\n\n2587090\n1219190\n-0.0454853\n-0.0702948\n-0.5646210\n94\n13.665169\n-0.0681556\n-0.4406129\n0.1884064\n0.4930030\n6.824774\n2.3039992\n0.8215204\n0.5413071\n3.948273\n6.073048\nd1979_2010\n\n\n2587090\n1219170\n-0.0903087\n0.0145723\n-0.6621951\n94\n14.756312\n-0.0861870\n-0.5188757\n-0.0721385\n0.4922101\n6.898385\n2.2375104\n-0.7484674\n0.7348465\n3.959431\n2.127208\nd1979_2010\n\n\n2587110\n1219170\n-0.0945719\n-0.0001643\n-0.3129207\n94\n32.816425\n-0.0599516\n-0.3097113\n-0.0394869\n0.4901487\n7.503298\n1.9259268\n-0.9489474\n0.8678100\n4.539225\n2.297817\nd1979_2010\n\n\n2587070\n1219150\n-0.0908837\n0.0065551\n-0.5805916\n94\n3.599204\n-0.1039762\n-0.3818592\n0.0668136\n0.4911794\n6.921697\n0.7394082\n-0.8139611\n0.8363171\n3.804235\n1.829110\nd1979_2010"
  },
  {
    "objectID": "04-model_test.html#model-testing",
    "href": "04-model_test.html#model-testing",
    "title": "4  Model Analysis",
    "section": "4.2 Model testing",
    "text": "4.2 Model testing\nTo test our model for how well it predicts on data it has not seen before, we first have to load the {ranger} package to load all functionalities to run a Random Forest in the predict() function. Alongside our model, we feed our validation data into the function and set its parallelization settings to use all but one of our computer’s cores.\n\n4.2.1 Make predictions\n\n\nCode\n# Need to load {ranger} because ranger-object is used in predict()\nlibrary(ranger) \n\n# Make predictions for validation sites\nprediction &lt;- \n  predict(rf,                # RF model\n          data = data_val,   # Predictor data\n          num.threads = parallel::detectCores() - 1)\n\n# Save predictions to validation df\ndata_val$pred &lt;- prediction$predictions\n\n\n\n\n4.2.2 Model metrics\nNow that we have our predictions ready, we can extract standard metrics for a classification problem (see AGDS Chapter 8.2.2).\n\n\nCode\n# Calculate error\nerr &lt;- data_val$ph.0.10 - data_val$pred\n\n# Calculate bias\nbias &lt;- mean(err, na.rm = T) |&gt; round(2)\n\n# Calculate RMSE\nrmse &lt;- sqrt(mean(err, na.rm = T)) |&gt; round(2)\n\n# Calculate R2\nr2 &lt;- cor(data_val$ph.0.10, data_val$pred, method = \"pearson\")^2 |&gt; round(2)\n\n\n\n\n4.2.3 Metric plots\n\n\nCode\ndata_val |&gt; \n  ggplot2::ggplot(ggplot2::aes(x = pred, y = ph.0.10)) +\n  ggplot2::geom_point() +\n  ggplot2::geom_smooth(method = \"lm\",\n                       color = \"tomato\") +\n  # Add layout\n  ggplot2::theme_classic() +\n  ggplot2::geom_abline(\n    intercept = 0, \n    slope = 1, \n    linetype = \"dotted\") +\n  ggplot2::ylim(5, 7.5) +\n  ggplot2::xlim(5, 7.5) +\n  ggplot2::labs(\n    title = \"Predicted vs. Observed soil pH 0-10 cm\",\n    # subtitle = paste0(\"Bias = \", bias, \", RMSE = \", rmse, \", R^2 = \", r2),\n    subtitle = bquote(paste(\"Bias = \", .(bias), \n                            \", RMSE = \", .(rmse), \n                            \", R\"^2, \" = \", .(r2))),\n    x = \"Predicted\",\n    y = \"Observed\"\n  )\n\n\n\n\n\nFigure 4.1: Comparison of observed versus predicted values for top soil pH using a simple Random Forest model.\n\n\n\n\nThe plot shows that our model performs quite well for the fact that we randomly selected 15 covariates and did no model tuning whatsoever. Yet, we can also see that the model tends to overestimate at low pH values, with quite a bit point cloud to the right of the lower end of the 1:1 line."
  },
  {
    "objectID": "04-model_test.html#create-prediction-maps",
    "href": "04-model_test.html#create-prediction-maps",
    "title": "4  Model Analysis",
    "section": "4.3 Create prediction maps",
    "text": "4.3 Create prediction maps\nNow, we finally come to the probably most interesting part of this tutorial: Creating a map of top soil pH values across our study area. For this, we again make predictions with our Random Forest model but we use our covariates dataframe for the study area, instead of only at the sampling locations as done above.\n\n\nCode\n# Need to load {ranger} because ranger-object is used in predict()\nlibrary(ranger) \n\n# Make predictions using the RF model\nprediction &lt;- \n  predict(rf,              # RF model\n          data = cov_df,   # Predictor data\n          num.threads = parallel::detectCores() - 1)\n\n# Attach predictions to dataframe and round them\ncov_df$prediction &lt;- round(prediction$predictions, 2)\n\n\n\n\nCode\n# Extract dataframe with coordinates and predictions\ndf_map &lt;- cov_df |&gt; dplyr::select(x, y, prediction)\n\n# Turn dataframe into a raster\nra_predictions &lt;- \n  terra::rast(\n    df_map,                  # Table to be transformed\n    crs = \"+init=epsg:2056\", # Swiss coordinate system\n    extent = terra::ext(cov_raster) # Prescribe same extent as predictor rasters\n            )\n\n\n\n\nCode\n# Let's have a look at our predictions!\n# To have some more flexibility, we can plot this in the ggplot-style as such:\nggplot2::ggplot() +\n  tidyterra::geom_spatraster(data = ra_predictions) +\n  ggplot2::scale_fill_viridis_c(\n    na.value = NA,\n    option = \"viridis\",\n    name = \"pH\"\n    ) +\n  ggplot2::theme_classic() +\n  ggplot2::scale_x_continuous(expand = c(0, 0)) +\n  ggplot2::scale_y_continuous(expand = c(0, 0)) +\n  ggplot2::labs(title = \"Predicted soil pH (0 - 10cm)\")\n\n\n\n\n\nFigure 4.2: Predicted map of top soil pH using a simple Random Forest model.\n\n\n\n\nInteresting, we see that our prediction map does not cover the entire study area. This could be a consequence of using a limited set of covariates for our predictions. Moreover, we see that in this study area, there is a tendency of having more acidic soils towards the south west and more basic soils towards the north east. To interpret this map further, we could map it onto a leaflet map, such as done in Chapter 2.\n\n\nCode\n# Save raster as .tif file\nterra::writeRaster(\n  ra_predictions,\n  \"../data/ra_predicted_ph0-10.tif\",\n  datatype = \"FLT4S\",  # FLT4S for floats, INT1U for integers (smaller file)\n  filetype = \"GTiff\",  # GeoTiff format\n  overwrite = TRUE     # Overwrite existing file\n)"
  },
  {
    "objectID": "04-model_test.html#example-for-predicting-a-categorical-variable",
    "href": "04-model_test.html#example-for-predicting-a-categorical-variable",
    "title": "4  Model Analysis",
    "section": "4.4 Example for predicting a categorical variable",
    "text": "4.4 Example for predicting a categorical variable\nBelow is an example for how you conducted everything you learned in this tutorial, from data wrangling to model evaluation, but with using a categorical response instead of a continuous one.\n\n4.4.1 Data preparation\n\n\nCode\n# Load clean data\ndata_clean &lt;- readRDS(here::here(\"data/bern_sampling_locations_with_covariates.rds\"))\n\n# Specify response and predictors\nresponse &lt;- \"waterlog.30\" # Pick water status at 30cm\n\n# Make sure that response is encoded as factor!\ndata_clean[[response]] &lt;- factor(data_clean[[response]],\n                                 levels = c(0, 1),\n                                 labels = c(\"dry\", \"wet\"))\n\ncat(\"Target is encoded so that a model predicts the probability that the soil at 30cm is: \",\n    levels(data_clean[[response]])[1])\n\n\nTarget is encoded so that a model predicts the probability that the soil at 30cm is:  dry\n\n\n\n\nCode\n# Specify predictors: Remove soil sampling information\npredictors &lt;- \n  data_clean |&gt; \n  dplyr::select(-response,                        # Remove response variable\n                -site_id_unique,                  # Remove site ID\n                -tidyr::starts_with(\"ph\"),        # Remove pH information\n                -tidyr::starts_with(\"waterlog\"),  # Remove water-status info\n                -dclass,                          # Remove water-status info\n                -dataset) |&gt;                      # Remove calib./valid. info\n  names()\n\n# Split dataset into calibration and validation\ndata_cal &lt;- data_clean |&gt; dplyr::filter(dataset == \"calibration\")\ndata_val &lt;- data_clean |&gt; dplyr::filter(dataset == \"validation\")\n\n# Filter out any NA to avoid error when running a Random Forest\ndata_cal &lt;- data_cal |&gt; tidyr::drop_na()\ndata_val &lt;- data_val |&gt; tidyr::drop_na()\n\n# A little bit of verbose output:\nn_tot &lt;- nrow(data_cal) + nrow(data_val)\n\nperc_cal &lt;- (nrow(data_cal) / n_tot) |&gt; round(2) * 100\nperc_val &lt;- (nrow(data_val) / n_tot) |&gt; round(2) * 100\n\ncat(\"For model training, we have a calibration / validation split of: \",\n    perc_cal, \"/\", perc_val, \"%\")\n\n\nFor model training, we have a calibration / validation split of:  75 / 25 %\n\n\n\n\n4.4.2 Model training\n\n\nCode\nrf &lt;- ranger::ranger( \n  y = data_cal[, response],   # Response variable\n  x = data_cal[, predictors], # Predictor variables\n  probability = TRUE,         # Set true for categorical variable\n  seed = 42,                  # Seed to reproduce randomness\n  num.threads = parallel::detectCores() - 1) # Use all but one CPU\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that we are skipping model interpretation here to keep it brief.\n\n\n\n\n4.4.3 Model testing\n\n4.4.3.1 Model predictions\n\n\nCode\n# Need to load {ranger} because ranger-object is used in predict()\nlibrary(ranger)\n\n# Make predictions for validation sites\nprediction &lt;- \n  predict(rf,                # RF model\n          data = data_val,   # Predictor data\n          num.threads = parallel::detectCores() - 1)\n\n# Save predictions to validation df\n# First row holds probability for reference level\ndata_val$pred &lt;- round(prediction$predictions[, 1], 2)\n\n\n\n\n4.4.3.2 Model metrics\nFor our predictions, we now have a probabilities for the reference level of our response. To turn this into the original factor levels of 0 and 1, we have to map a threshold to these probabilities. Here, we use a threshold of 50%, which may or may not be optimal - a discussion for another course.\n\n\nCode\n# Set threshold\nthresh &lt;- 0.5\n\n# Translate probability values into comparable factor levels\ndata_val$pred_lvl &lt;- \n  factor(\n    data_val$pred &gt; thresh, \n    levels = c(TRUE, FALSE), \n    labels = levels(data_val[[response]])\n    )\n\n\nDue to the response variable being a categorical variable, we have to use slightly different model metrics to evaluate our model. To get started, we need a confusion matrix. This 2x2 matrix shows all model predictions and whether they were true/false positives/negatives. Have a look at the table printed below. You can see that in the top left cell, 184 predictions for dry sites and 2 predictinos for wet sites were correct. However, our model predicted 12 times that a site would be wet although it was dry, and 2 times that the site was wet when it was dry instead.\n\n\nCode\n# Create confusion matrix\nma_conf &lt;- \n  table(\n    predicted = data_val[[response]],\n    observed  = data_val$pred_lvl\n  )\n\n# Display confusion matrix\nma_conf \n\n\n         observed\npredicted dry wet\n      dry 185   1\n      wet  12   2\n\n\nFrom these predictions, we can calculate many different metrics and the {verification} package provides a nice short-cut to get them. Depending on your requirements that your model should meet, you want to investigate different metrics. Here, we will have a look at some more general ones:\n\n\nCode\n# Compute statistics\nl_stat &lt;- verification::multi.cont(ma_conf) \n\n# Print output\ncat(\n  \"The model showed:\",\n  \"\\n a percentage of correct values of: \", l_stat$pc,\n  \"\\n a bias of (dry / wet predictions): \", round(l_stat$bias, 2),\n  \"\\n a Peirce Skill Score of: \", round(l_stat$ps, 2))\n\n\nThe model showed: \n a percentage of correct values of:  0.935 \n a bias of (dry / wet predictions):  0.94 4.67 \n a Peirce Skill Score of:  0.61\n\n\nThese metrics looks quite good! We see that in 93% of all cases, our model predicted the water status of a soil location accurately [(184+2)/(184+12+2+2) = 0.93]. The model showed almost no bias when predicting at dry sites but tends to overestiamte at wet sites (predicted 12 times a site is wet when it was dry). But note that this could also be a consequence of our data being skewed towards many more dry than wet sites.\nThe Perice Skill Score answers the question of “How well did the forecast separate ‘yes’ events from ‘no’ events”.1 This means how well our model separated dry from wet sites. The score has a range of [-1, 1] where 1 means that there is a perfect distinction, -1 means that the model always gets it wrong (so, simply taking the opposite of the prediction always get it right), and 0 means that the model is no better than guessing randomly. We see that our model has a score of 0.44, which means that is certainly better than just random predictions but - in line with the bias - tends to predict dry sites to be wet.\n\nNote: The Peirce Skill Score is originally from Peirce, C. S., 1884: The numerical measure of the success of pre- dictions. Science, 4, 453–454. But it has been re-discovered several times since, which is why it also often referred to as “Kuipers Skill Score” or “Hanssen-Kuiper Skill Score”, or “True Skill Statistic”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.3.3 Metric plots\nLet’s create a combined violin-box-plot to get a better feeling for our predictions. The plot below visualizes what we already learned from the model metrics. That is, that our model tends to predict dry sites quite well (see how close the median is to 1?) but suffers from a few outliers. If we were to increase the prediction threshold thresh defined above, our model would perform words, as more outliers fall below the threshold. Also, the prediction for wet sites is not very clear as indicated by the relatively even distribution of predicted probabilities, and the median at around 75%.\n\n\nCode\ndata_val |&gt; \n  ggplot2::ggplot() +\n  ggplot2::aes(x = waterlog.30, y = pred, fill = waterlog.30) +\n  ggplot2::geom_violin() +\n  ggplot2::geom_boxplot(width = 0.07) +\n  ggplot2::labs(\n    title  = \"Prediction of Water Status at 30cm\",\n    y      = \"Predicted Probability\",\n    x      = \"Observed Status\",\n    fill   = \"Water\\nStatus\"\n  ) +\n  ggplot2::geom_abline(\n    intercept = thresh, \n    slope = 0, \n    linetype = \"dotted\"\n    ) +\n  ggplot2::ylim(0, 1) +\n  ggplot2::theme_classic()\n\n\n\n\n\n\n\n\n4.4.4 Prediction map\nNote that we have not conducted any variable selection for this simplified example. Thus, we have to create a new raster stack with all predictors and cannot re-use the subset that we used for predicting pH.\n\n\n\nCode\n# Get a list of all covariate file names\ncovariate_files &lt;- \n  list.files(path = here::here(\"data-raw/geodata/covariates/\"), \n             pattern = \".tif$\",\n             recursive = TRUE, \n             full.names = TRUE\n             )\n\n# Load all rasters as a stack\ncov_raster &lt;- terra::rast(covariate_files)\n\n# Get coordinates for which we want data\nsampling_xy &lt;- target_df |&gt; dplyr::select(x, y)\n\n# Extract data from covariate raster stack\ncov_df &lt;-\n  terra::extract(cov_raster,  # The raster we want to extract from\n                 sampling_xy,  # A matrix of x and y values to extract for\n                 ID = FALSE    # To not add a default ID column to the output\n                 )\n\ncov_df &lt;- cbind(sampling_xy, cov_df)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Attaching reference timeset levels from prepared dataset\nbern_cov &lt;- readRDS(here::here(\"data/bern_sampling_locations_with_covariates.rds\"))\n\ncov_df$timeset &lt;- \"d1979_2010\"\nlevels(cov_df$timeset) &lt;- c(unique(bern_cov$timeset))\n\n# Define numerically encoded categorical variables \ncat_vars &lt;- \n  cov_df |&gt; \n  # Get number of distinct values per variable\n  dplyr::summarise(dplyr::across(dplyr::everything(), ~ dplyr::n_distinct(.))) |&gt; \n  # Turn df into long format for easy filtering\n  tidyr::pivot_longer(dplyr::everything(), \n                      names_to = \"variable\", \n                      values_to = \"n\") |&gt; \n  # Filter out variables with 10 or less distinct values\n  dplyr::filter(n &lt;= 10) |&gt;\n  # Extract the names of these variables\n  dplyr::pull('variable')\n\ncov_df &lt;- \n  cov_df |&gt; \n  dplyr::mutate(dplyr::across(cat_vars, ~ as.factor(.)))\n\n# Reduce dataframe to hold only rows without any NA values\ncov_df &lt;- \n  cov_df |&gt; \n  tidyr::drop_na()\n\n# Display final dataframe\nhead(cov_df) |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\ny\nbe_gwn25_hdist\nbe_gwn25_vdist\ncindx10_25\ncindx50_25\ngeo500h1id\ngeo500h3id\nlgm\nlsf\nmrrtf25\nmrvbf25\nmt_gh_y\nmt_rr_y\nmt_td_y\nmt_tt_y\nmt_ttvar\nNegO\nPosO\nprotindx\nSe_alti2m_std_50c\nSe_conv2m\nSe_curv25m\nSe_curv2m_fmean_50c\nSe_curv2m_fmean_5c\nSe_curv2m_s60\nSe_curv2m_std_50c\nSe_curv2m_std_5c\nSe_curv2m\nSe_curv50m\nSe_curv6m\nSe_curvplan25m\nSe_curvplan2m_fmean_50c\nSe_curvplan2m_fmean_5c\nSe_curvplan2m_s60\nSe_curvplan2m_s7\nSe_curvplan2m_std_50c\nSe_curvplan2m_std_5c\nSe_curvplan2m\nSe_curvplan50m\nSe_curvprof25m\nSe_curvprof2m_fmean_50c\nSe_curvprof2m_fmean_5c\nSe_curvprof2m_s60\nSe_curvprof2m_s7\nSe_curvprof2m_std_50c\nSe_curvprof2m_std_5c\nSe_curvprof2m\nSe_curvprof50m\nSe_diss2m_50c\nSe_diss2m_5c\nSe_e_aspect25m\nSe_e_aspect2m_5c\nSe_e_aspect2m\nSe_e_aspect50m\nSe_MRRTF2m\nSe_MRVBF2m\nSe_n_aspect2m_50c\nSe_n_aspect2m_5c\nSe_n_aspect2m\nSe_n_aspect50m\nSe_n_aspect6m\nSe_NO2m_r500\nSe_PO2m_r500\nSe_rough2m_10c\nSe_rough2m_5c\nSe_rough2m_rect3c\nSe_SAR2m\nSe_SCA2m\nSe_slope2m_fmean_50c\nSe_slope2m_fmean_5c\nSe_slope2m_s60\nSe_slope2m_s7\nSe_slope2m_std_50c\nSe_slope2m_std_5c\nSe_slope2m\nSe_slope50m\nSe_slope6m\nSe_toposcale2m_r3_r50_i10s\nSe_tpi_2m_50c\nSe_tpi_2m_5c\nSe_tri2m_altern_3c\nSe_tsc10_2m\nSe_TWI2m_s15\nSe_TWI2m_s60\nSe_TWI2m\nSe_vrm2m_r10c\nSe_vrm2m\nterrTextur\ntsc25_18\ntsc25_40\nvdcn25\nvszone\ntimeset\n\n\n\n\n2587670\n1219750\n852.6916\n15.664033\n-1.093336\n9.219586\n5\n0\n6\n1.6357950\n0.1075638\n0.7211104\n1311.320\n10791.72\n57\n94\n183\n1.526693\n1.475333\n0.0650055\n4.784680\n5.095301\n-0.1573657\n0.0024712\n0.8294562\n-0.0401642\n5.627444\n8.208909\n5.1277814\n-0.0951815\n2.5569961\n-0.0534006\n-0.0230801\n0.1763837\n-0.0115326\n0.3709164\n2.520638\n3.900391\n1.0937366\n-0.0541850\n0.1039651\n-0.0255513\n-0.6530724\n0.0286316\n-1.1700106\n4.067357\n5.008852\n-4.0340447\n0.0409964\n0.3920868\n0.7319978\n-0.0730021\n0.0523264\n0.1118718\n-0.0341700\n0.2049596\n0.2460670\n0.9587829\n0.9984013\n0.9855098\n0.9959861\n0.9919792\n1.453115\n1.499916\n1.2614983\n0.9052418\n0.4487450\n4.031501\n22.039053\n5.379811\n8.8745193\n6.507652\n8.9208927\n4.443856\n4.4604211\n6.7506914\n5.657930\n9.0587664\n0\n-0.1146867\n0.3968636\n23.013111\n0.4660870\n0.0196044\n0.0193961\n0.0094032\n0.0049250\n0.0021733\n0.4892213\n0.4671952\n2.447572\n32.42764\n5\nd1979_2010\n\n\n2587690\n1219750\n842.4173\n14.940482\n-1.088761\n8.887812\n5\n0\n6\n1.6952833\n0.1490467\n0.6501970\n1311.240\n10790.04\n57\n94\n183\n1.519305\n1.479355\n0.0614093\n4.554082\n-1.164458\n-0.0033177\n0.0346522\n-0.2036149\n-0.0067883\n5.807981\n2.624915\n0.0343211\n-0.0114668\n-0.5821388\n0.0590281\n-0.0118661\n0.0516823\n0.0017402\n-0.1523290\n2.609372\n1.747575\n-0.0235629\n-0.0044247\n0.0623458\n-0.0465183\n0.2552971\n0.0085285\n0.3911650\n4.186157\n1.268572\n-0.0578840\n0.0070421\n0.3616736\n0.4156418\n-0.1002210\n0.0261770\n0.1186721\n-0.0198933\n0.1900981\n0.4769361\n0.9681105\n0.9996192\n0.9919428\n0.9949375\n0.9969665\n1.509942\n1.481037\n1.1013201\n0.7694993\n0.4196114\n4.022690\n274.031982\n5.293089\n6.7173972\n6.291715\n6.6285639\n4.420249\n1.4163034\n6.0838585\n5.312412\n6.6105819\n0\n-0.5947826\n-0.0899814\n20.897743\n0.4708194\n0.0147714\n0.0177614\n0.0012333\n0.0016250\n0.0001495\n0.4985980\n0.4697721\n2.450347\n32.34033\n5\nd1979_2010\n\n\n2587090\n1219190\n751.8956\n5.726926\n-11.884583\n-11.109116\n4\n0\n6\n0.5349063\n0.5413071\n1.4682430\n1310.274\n10723.66\n58\n94\n184\n1.555187\n1.503930\n0.0460703\n1.626563\n-20.532444\n0.0084397\n0.0061933\n0.0839349\n-0.0022937\n6.824774\n6.073048\n-1.7545626\n-0.0072457\n-1.0616286\n-0.0088943\n-0.0454853\n0.0885931\n-0.0704493\n0.1036513\n2.366981\n1.279673\n1.0475039\n-0.0017489\n-0.0173340\n-0.0516786\n0.0046582\n-0.0681556\n0.1884064\n5.534662\n5.491115\n2.8020666\n0.0054969\n0.5250703\n0.3176954\n-0.4406129\n-0.5646210\n-0.0504419\n-0.2286900\n0.0928654\n1.1235304\n-0.9772032\n0.8215204\n0.9954001\n-0.9600990\n0.9919993\n1.515766\n1.494511\n0.5166996\n0.4931896\n0.4272473\n4.022115\n13.665169\n3.551755\n2.3039992\n3.040830\n2.7184446\n3.948273\n2.3797400\n5.7317319\n1.395017\n2.3336451\n0\n-0.0982406\n-0.0702948\n20.768515\n0.5078870\n0.0197626\n0.0162485\n0.0259366\n0.0020749\n0.0012587\n0.7806686\n0.4930030\n2.233182\n15.32439\n8\nd1979_2010\n\n\n2587090\n1219170\n735.4257\n5.784212\n-13.546880\n-12.143552\n4\n0\n6\n0.5427678\n0.7348465\n1.4188210\n1310.245\n10721.32\n58\n94\n184\n1.555535\n1.504260\n0.0452300\n1.741869\n2.745619\n0.0117131\n-0.0394273\n0.1259893\n0.0330435\n6.898385\n2.127208\n0.6203362\n0.0312720\n-0.0710808\n0.0096938\n-0.0903087\n0.0241072\n-0.0531435\n0.0095001\n2.350148\n1.199804\n0.2795571\n0.0035725\n-0.0020192\n-0.0508814\n-0.1018821\n-0.0861870\n-0.0721385\n5.623002\n1.172386\n-0.3407791\n-0.0276995\n0.6905439\n0.5443047\n-0.5188757\n-0.6621951\n-0.8731300\n-0.2571333\n1.7519246\n1.1301626\n-0.9925461\n-0.7484674\n-0.4839056\n-0.9521305\n-0.6938887\n1.534615\n1.545543\n0.5673958\n0.4292437\n0.2561375\n4.003264\n14.756312\n3.531246\n2.2375104\n3.003023\n2.1449676\n3.959431\n0.7783145\n2.3075097\n1.400111\n1.9295034\n0\n0.7135532\n0.0145723\n13.433935\n0.5291796\n0.0141175\n0.0159906\n0.0154473\n0.0007750\n0.0005787\n0.7260778\n0.4922101\n2.229970\n15.40787\n8\nd1979_2010\n\n\n2587110\n1219170\n723.9910\n6.106696\n-13.322203\n-12.183930\n4\n0\n6\n0.5323660\n0.8678100\n1.3493569\n1310.299\n10722.13\n58\n94\n184\n1.555655\n1.504170\n0.0451466\n1.808976\n-8.940220\n0.0324950\n-0.0373967\n0.1306849\n0.0359804\n7.503298\n2.297817\n-0.1434636\n0.0834899\n-0.1115735\n0.0275330\n-0.0945719\n0.0954700\n-0.0239712\n0.0538922\n2.387497\n1.301248\n-0.3521201\n0.0365431\n-0.0049620\n-0.0571752\n-0.0352149\n-0.0599516\n-0.0394869\n6.239721\n1.240976\n-0.2086566\n-0.0469468\n0.6792284\n0.5120147\n-0.3097113\n-0.3129207\n-0.2375892\n-0.1402488\n2.8863275\n1.3914874\n-0.9945219\n-0.9489474\n-0.9524035\n-0.9798594\n-0.9637377\n1.536156\n1.546788\n0.5236238\n0.4052551\n0.2287366\n4.001763\n32.816425\n3.856629\n1.9259268\n3.079502\n1.8851717\n4.539225\n0.4211105\n1.6905378\n1.347915\n1.9237802\n0\n0.9748727\n-0.0001643\n11.591580\n0.5378539\n0.0122094\n0.0161002\n0.0079080\n0.0004500\n0.0000955\n0.7223964\n0.4901487\n2.229178\n15.43506\n8\nd1979_2010\n\n\n2587070\n1219150\n726.0598\n5.136146\n-14.969542\n-13.059101\n4\n0\n6\n0.4896232\n0.8363171\n1.5352163\n1310.168\n10718.23\n58\n94\n184\n1.556895\n1.504168\n0.0449906\n1.885761\n-5.564820\n0.1670244\n-0.0237084\n0.0468207\n0.0322937\n6.921697\n1.829110\n-0.2251399\n0.0651237\n0.1595823\n0.0051374\n-0.0908837\n0.1198024\n-0.0716825\n0.0926395\n2.425535\n1.074812\n-0.0860424\n0.0125605\n-0.1618870\n-0.0671752\n0.0729817\n-0.1039762\n0.0668136\n5.548432\n0.934908\n0.1390975\n-0.0525633\n0.7167594\n0.4836134\n-0.3818592\n-0.5805916\n-0.9587489\n-0.2188960\n1.1769800\n2.5623682\n-0.9945219\n-0.8139611\n-0.1249791\n-0.9608662\n-0.7394884\n1.541335\n1.547748\n0.4012785\n0.2244926\n0.1277301\n4.000143\n3.599204\n3.335257\n0.7394082\n3.145846\n0.6904325\n3.804235\n0.3790899\n0.4726965\n2.112438\n0.4233291\n0\n0.7557949\n0.0065551\n6.877132\n0.5070984\n0.0124573\n0.0161766\n0.0134654\n0.0003000\n0.0000463\n0.6677173\n0.4911794\n2.225173\n15.57539\n8\nd1979_2010\n\n\n\n\n\nNow that we have our predictor raster again, we can make our predictions and plot them.\n\n\nCode\n# Need to load {ranger} because ranger-object is used in predict()\nlibrary(ranger) \n\n# Make predictions using the RF model\nprediction &lt;- \n  predict(rf,              # RF model\n          data = cov_df,   # Predictor data\n          num.threads = parallel::detectCores() - 1)\n\n# Attach predictions to dataframe and round them\ncov_df$prediction &lt;- round(prediction$predictions[,1], 2)\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote the difference to the regression task before: To access the predicted probabilities, we need to use prediction$predictions[,1].\n\n\n\n\nCode\n# Extract dataframe with coordinates and predictions\ndf_map &lt;- cov_df |&gt; dplyr::select(x, y, prediction)\n\n# Turn dataframe into a raster\nra_predictions &lt;- \n  terra::rast(\n    df_map,                  # Table to be transformed\n    crs = \"+init=epsg:2056\", # Swiss coordinate system\n    extent = terra::ext(cov_raster) # Prescribe same extent as predictor rasters\n            )\n\n\n\n\nCode\n# Let's have a look at our predictions!\n# To have some more flexibility, we can plot this in the ggplot-style as such:\nggplot2::ggplot() +\n  tidyterra::geom_spatraster(data = ra_predictions) +\n  ggplot2::scale_fill_viridis_c(\n    na.value = NA,\n    option = \"viridis\",\n    name = \"Probability\"\n    ) +\n  ggplot2::theme_classic() +\n  ggplot2::scale_x_continuous(expand = c(0, 0)) +\n  ggplot2::scale_y_continuous(expand = c(0, 0)) +\n  ggplot2::labs(title = expression(paste(\"Predicted probability for \", \n                                         italic(bold(\"no\")), \n                                         \" waterlog at 30 cm\")))"
  },
  {
    "objectID": "04-model_test.html#footnotes",
    "href": "04-model_test.html#footnotes",
    "title": "4  Model Analysis",
    "section": "",
    "text": "See this useful page on forecast verification: https://www.cawcr.gov.au/projects/verification/↩︎"
  },
  {
    "objectID": "99-exercise.html#your-project",
    "href": "99-exercise.html#your-project",
    "title": "5  Exercise",
    "section": "5.1 Your Project",
    "text": "5.1 Your Project\nAfter reading through this tutorial, you should have a solid understanding of how you can use Random Forest models for digital soil mapping. Based on the provided knowledge and code, it is now your task to improve and expand the analysis. As stated in Chapter Chapter 2, the model created in the tutorial picked random covariates for model building. This is of course nonsensical and should be your first step to improve the model. Find a way to create a workflow that filters for the most relevant predictors (do not pick random variables, and do not just add all variables to your final model - do you udnerstand why the latter makes no sense?…). What number of variables do you find to be suitable for your final model?\nIn the AGDS Book, we explain how to conduct hyperparameter tuning and cross-validation of RandomForests via the {caret} package. Read up on how to do this and implement your own routine to predict the top layer pH! Moreover, we explain how to use model-agnostic procedures to interpret your model in the AGDS Book. Conduct these tests on your model and interpret your findings.\nFinally, you should test your model as demonstrated in the tutorial. Give explanations for how and why your model performs differently than the one in this tutorial. Note that this exercise thrives on your curiosity to code! So, if you want to go further, you could also investigate the prediction of other soil properties, or test and compare other machine learning methods."
  },
  {
    "objectID": "99-variables.html",
    "href": "99-variables.html",
    "title": "6  Variables",
    "section": "",
    "text": "Detailed information can be found in folder resources on GitHub. Information on the individual metrics can be found online.\n\n\n\n\n\n\n\n\n\nFilename\nMeaning\nUnit\n\n\n\n\nbe_gwn25_hdist.tif\nHorizontal distance to water body at 25m resolution\nm\n\n\nbe_gwn25_vdist.tif\nHorizontal distance to water body at 25m resolution\nm\n\n\ncindx10_25.tif\nConvergence index at 25m resolution, taken over a radius of 10 pixels\nindex\n\n\ncindx50_25.tif\nConvergence index at 25m resolution, taken over a radius of 50 pixels\nindex\n\n\ngeo500h1id.tif\nGeological map 1:500’000 for ground water presence\ncategorical\n\n\ngeo500h3id.tif\nGeological map 1:500’000 for ground layer\ncategorical\n\n\nlgm.tif\nLast glacial maximum\ncategorical, ages ago\n\n\nlsf.tif\nSlope length and steepness factor\nindex\n\n\nmrrtf25.tif\nMulti-resolution ridge top flatness at 25m resolution\nindex\n\n\nmrvbf25.tif\nMulti-resolution valley bottom flatness at 25m resolution\nindex\n\n\nmt_gh_y.tif\nMean annual incoming radiation\n0.1 W/m2\n\n\nmt_rr_y.tif\nMean annual precipitation\nmm\n\n\nmt_td_y.tif\nMean annual dew point temperature\n0.1 ºC\n\n\nmt_tt_y.tif\nMean annual temperature\n0.1 ºC\n\n\nmt_ttvar.tif\nTemperature variation (= mean temperature in January - mean temperature in Juli)\n0.1 ºC\n\n\nNegO.tif\nTopographic negative openness\nindex\n\n\nPosO.tif\nTopographic positive openness\nindex\n\n\nprotindx.tif\nMorphometric protection index at 25m resolution\nindex\n\n\nSe_alti2m_std_50c.tif\nStandard deviation of elevation at 50 pixels resolution\nm\n\n\nSe_conv2m.tif\nConvergence index at 2m resolution\ndegrees\n\n\nSe_curv25m.tif\nCurvature at 25m resolution\n1/m\n\n\nSe_curv2m_fmean_50c.tif\nCurvature at 2m resolution, mean over 50 pixels\n1/m\n\n\nSe_curv2m_fmean_5c.tif\nCurvature at 2m resolution, mean over 5 pixels\n1/m\n\n\nSe_curv2m_s60.tif\nCurvature at 2m resolution, smoothed over area with radius of 60 pixels\n1/m\n\n\nSe_curv2m_std_50c.tif\nCurvature at 2m resolution, standard deviation over 50 pixels\n1/m\n\n\nSe_curv2m_std_5c.tif\nCurvature at 2m resolution, standard deviation over 5 pixels\n1/m\n\n\nSe_curv2m.tif\nCurvature at 2m resolution\n1/m\n\n\nSe_curv50m.tif\nCurvature at 50m resolution\n1/m\n\n\nSe_curv6m.tif\nCurvature at 6m resolution\n1/m\n\n\nSe_curvplan25m.tif\nCurvature plan (planform curvature) at 25m resolution\n1/m\n\n\nSe_curvplan2m_fmean_50c.tif\nCurvature plan (planform curvature) at 2m resolution, mean over 50 pixels\n1/m\n\n\nSe_curvplan2m_fmean_5c.tif\nCurvature plan (planform curvature) at 2m resolution, mean over 5 pixels\n1/m\n\n\nSe_curvplan2m_s60.tif\nCurvature plan (planform curvature) at 2m resolution, smoothed over area with radius of 60 pixels\n1/m\n\n\nSe_curvplan2m_s7.tif\nCurvature plan (planform curvature) at 2m resolution, smoothed over area with radius of 7 pixels\n1/m\n\n\nSe_curvplan2m_std_50c.tif\nCurvature plan (planform curvature) at 2m resolution, standard deviation over 50 pixels\n1/m\n\n\nSe_curvplan2m_std_5c.tif\nCurvature plan (planform curvature) at 2m resolution, standard deviation over 5 pixels\n1/m\n\n\nSe_curvplan2m.tif\nCurvature plan (planform curvature) at 2m resolution\n1/m\n\n\nSe_curvplan50m.tif\nCurvature plan (planform curvature) at 50m resolution\n1/m\n\n\nSe_curvprof25m.tif\nCurvature profile (profile curvature) at 25m resolution\n1/m\n\n\nSe_curvprof2m_fmean_50c.tif\nCurvature profile (profile curvature) at 2m resolution, mean over 50 pixels\n1/m\n\n\nSe_curvprof2m_fmean_5c.tif\nCurvature profile (profile curvature) at 2m resolution, mean over 5 pixels\n1/m\n\n\nSe_curvprof2m_s60.tif\nCurvature profile (profile curvature) at 2m resolution, smoothed over area with radius of 60 pixels\n1/m\n\n\nSe_curvprof2m_s7.tif\nCurvature profile (profile curvature) at 2m resolution, smoothed over area with radius of 7 pixels\n1/m\n\n\nSe_curvprof2m_std_50c.tif\nCurvature profile (profile curvature) at 2m resolution, standard deviation over 50 pixels\n1/m\n\n\nSe_curvprof2m_std_5c.tif\nCurvature profile (profile curvature) at 2m resolution, standard deviation over 5 pixels\n1/m\n\n\nSe_curvprof2m.tif\nCurvature profile (profile curvature) at 2m resolution\n1/m\n\n\nSe_curvprof50m.tif\nCurvature profile (profile curvature) at 50m resolution\n1/m\n\n\nSe_diss2m_50c.tif\nDissection at 2m resolution over area with radius of 50 pixels\nm\n\n\nSe_diss2m_5c.tif\nDissection at 2m resolution over area with radius of 5 pixels\nm\n\n\nSe_e_aspect25m.tif\nAspect - Eastness at 25m resolution (E=90º, cos(Aspect in Rad.))\ndegrees\n\n\nSe_e_aspect2m_5c.tif\nAspect - Eastness at 2m resolution, mean over area with radius of 5 pixels\ndegrees\n\n\nSe_e_aspect2m.tif\nAspect - Eastness at 2m resolution\ndegrees\n\n\nSe_e_aspect50m.tif\nAspect - Eastness at 50m resolution\ndegrees\n\n\nSe_MRRTF2m.tif\nMulti-resolution ridge top flatness at 2m resolution\nindex\n\n\nSe_MRVBF2m.tif\nMulti-resolution valley bottom flatness at 2m resolution\nindex\n\n\nSe_n_aspect2m_50c.tif\nAspect - Northness at 2m resolution, mean over area with radius of 50 pixels\ndegrees\n\n\nSe_n_aspect2m_5c.tif\nAspect - Northness at 2m resolution, mean over area with radius of 5 pixels\ndegrees\n\n\nSe_n_aspect2m.tif\nAspect - Northness at 2m resolution (N=90º, sin(Aspect in Rad.))\ndegrees\n\n\nSe_n_aspect50m.tif\nAspect - Northness at 50m resolution\ndegrees\n\n\nSe_n_aspect6m.tif\nAspect - Northness at 6m resolution\ndegrees\n\n\nSe_NO2m_r500.tif\nTopographic negative openness at 2m resolution, over area with radius of 500 pixels\nindex\n\n\nSe_PO2m_r500.tif\nTopographic positive openness at 2m resolution, over area with radius of 500 pixels\nindex\n\n\nSe_rough2m_10c.tif\nRoughness at 2m resolution, over area of with radius of 10 pixels\nm\n\n\nSe_rough2m_5c.tif\nRoughness at 2m resolution, over area of with radius of 5 pixels\nm\n\n\nSe_rough2m_rect3c.tif\nRoughness at 2m resolution, over rectangular area of 3 pixels\nm\n\n\nSe_SAR2m.tif\nSurface area ratio at 2m resolution\nratio\n\n\nSe_SCA2m.tif\nSpecific catchment area (contributing area, multi-flow) at 2m resolution\nsqm\n\n\nSe_slope2m_fmean_50c.tif\nSlope at 2m resolution, smoothed mean over 50 pixels\ndegree\n\n\nSe_slope2m_fmean_5c.tif\nSlope at 2m resolution, smoothed mean over 5 pixels\ndegree\n\n\nSe_slope2m_s60.tif\nSlope at 2m resolution, weighted smoothing over area with radius of 60 pixels\ndegree\n\n\nSe_slope2m_s7.tif\nSlope at 2m resolution, weighted smoothing over area with radius of 7 pixels\ndegree\n\n\nSe_slope2m_std_50c.tif\nSlope at 2m resolution, standard deviation over 50 pixels\ndegree\n\n\nSe_slope2m_std_5c.tif\nSlope at 2m resolution, standard deviation over 5 pixels\ndegree\n\n\nSe_slope2m.tif\nSlope at 2m resolution\ndegree\n\n\nSe_slope50m.tif\nSlope at 50m resolution\ndegree\n\n\nSe_slope6m.tif\nSlope at 6m resolution\ndegree\n\n\nSe_toposcale2m_r3_r50_i10s.tif\nToposcale at 2m resolution with intervals of 10 pixels\nindex\n\n\nSe_tpi_2m_50c.tif\nTopographic position index at 2m resolution, taken over area with radius of 50 pixels\nindex\n\n\nSe_tpi_2m_5c.tif\nTopographic position index at 2m resolution, taken over area with radius of 5 pixels\nindex\n\n\nSe_tri2m_altern_3c.tif\nTerrain ruggedness index at 2m resolution, taken over rectangular area of 3x3 pixels\nindex\n\n\nSe_tsc10_2m.tif\nTerrain surface convexity at 2m resolution, taken over radius of 15 pixels\nindex\n\n\nSe_TWI2m_s15.tif\nTopographic wetness index at 2m resolution, taken over radius of 15 pixels\nindex\n\n\nSe_TWI2m_s60.tif\nTopographic wetness index at 2m resolution, taken over radius of 60 pixels\nindex\n\n\nSe_TWI2m.tif\nTopographic wetness index at 2m resolution\nindex\n\n\nSe_vrm2m_r10c.tif\nVector ruggedness measure at 2m resolution, taken over radius of 10 pixels\nnone\n\n\nSe_vrm2m.tif\nVector ruggedness measure at 2m resolution\nnone\n\n\nterrTextur.tif\nTerrain texture at 2m resolution\nna\n\n\ntsc25_18.tif\nSurface convexity at 25m resolution\nindex\n\n\ntsc25_40.tif\nSurface convexity at 25m resolution\nindex\n\n\nvdcn25.tif\nVertical distance to drainage to channel networks at 25m resolution\nm\n\n\nvszone.tif\nDrainage zones at 25m resolution\ncategorical"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Hengl, T., Nussbaum, M., Wright, M. N., Heuvelink, G. B. M., &\nGräler, B. (2018). Random forest as a generic framework for predictive\nmodeling of spatial and spatio-temporal variables. PeerJ,\n6, e5518. https://doi.org/10.7717/peerj.5518\n\n\nJenny, H. (1994). Factors of soil formation: A system of\nquantitative pedology. Dover.\n\n\nNussbaum, M., Spiess, K., Baltensweiler, A., Grob, U., Keller, A.,\nGreiner, L., Schaepman, M. E., & Papritz, A. (2018). Evaluation of\ndigital soil mapping approaches with large sets of environmental\ncovariates. SOIL, 4(1), 1–22. https://doi.org/10.5194/soil-4-1-2018\n\n\nNussbaum, M., Walthert, L., Fraefel, M., Greiner, L., & Papritz, A.\n(2017). Mapping of soil properties at high resolution in Switzerland\nusing boosted geoadditive models. SOIL, 3(4), 191–210.\nhttps://doi.org/10.5194/soil-3-191-2017"
  }
]